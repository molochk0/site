name: CI/CD Pipeline

on:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\nenv:\n  NODE_VERSION: '18'\n  PNPM_VERSION: '8'\n\njobs:\n  # Quality checks and testing\n  quality:\n    name: Code Quality & Tests\n    runs-on: ubuntu-latest\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_USER: postgres\n          POSTGRES_DB: restaurant_test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Setup environment\n      run: |\n        cp .env.test .env.local\n        echo \"DATABASE_URL=postgresql://postgres:postgres@localhost:5432/restaurant_test\" >> .env.local\n        \n    - name: Generate Prisma client\n      run: npm run db:generate\n      \n    - name: Run database migrations\n      run: npm run db:migrate:deploy\n      \n    - name: Type checking\n      run: npm run type-check\n      \n    - name: Linting\n      run: npm run lint\n      \n    - name: Format checking\n      run: npm run format:check\n      \n    - name: Unit tests\n      run: npm run test:ci\n      \n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v4\n      with:\n        file: ./coverage/lcov.info\n        flags: unittests\n        name: codecov-umbrella\n        \n  # Build and deployment\n  build:\n    name: Build Application\n    runs-on: ubuntu-latest\n    needs: quality\n    \n    strategy:\n      matrix:\n        environment: [production, staging]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Setup environment for ${{ matrix.environment }}\n      run: |\n        if [ \"${{ matrix.environment }}\" = \"production\" ]; then\n          cp .env.production .env.local\n        else\n          cp .env.example .env.local\n        fi\n        \n    - name: Build application\n      run: |\n        if [ \"${{ matrix.environment }}\" = \"production\" ]; then\n          BUILD_STANDALONE=true npm run build\n        else\n          npm run build\n        fi\n      env:\n        NODE_ENV: ${{ matrix.environment == 'production' && 'production' || 'development' }}\n        \n    - name: Upload build artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: build-${{ matrix.environment }}\n        path: |\n          .next/\n          public/\n          package.json\n          package-lock.json\n        retention-days: 7\n        \n  # Security scanning\n  security:\n    name: Security Scan\n    runs-on: ubuntu-latest\n    needs: quality\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Run Snyk to check for vulnerabilities\n      uses: snyk/actions/node@master\n      continue-on-error: true\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        args: --severity-threshold=high\n        \n    - name: Run npm audit\n      run: |\n        npm audit --audit-level=moderate\n        \n  # Performance testing\n  lighthouse:\n    name: Lighthouse Performance\n    runs-on: ubuntu-latest\n    needs: build\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Download build artifacts\n      uses: actions/download-artifact@v4\n      with:\n        name: build-production\n        \n    - name: Start application\n      run: |\n        npm start &\n        sleep 10\n        \n    - name: Run Lighthouse CI\n      run: |\n        npm install -g @lhci/cli@0.12.x\n        lhci autorun\n      env:\n        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}\n        \n  # Deploy to staging\n  deploy-staging:\n    name: Deploy to Staging\n    runs-on: ubuntu-latest\n    needs: [build, security]\n    if: github.ref == 'refs/heads/develop'\n    environment: staging\n    \n    steps:\n    - name: Deploy to Vercel (Preview)\n      uses: amondnet/vercel-action@v25\n      with:\n        vercel-token: ${{ secrets.VERCEL_TOKEN }}\n        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}\n        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}\n        scope: ${{ secrets.VERCEL_ORG_ID }}\n        \n  # Deploy to production\n  deploy-production:\n    name: Deploy to Production\n    runs-on: ubuntu-latest\n    needs: [build, security, lighthouse]\n    if: github.ref == 'refs/heads/main'\n    environment: production\n    \n    steps:\n    - name: Deploy to Vercel (Production)\n      uses: amondnet/vercel-action@v25\n      with:\n        vercel-token: ${{ secrets.VERCEL_TOKEN }}\n        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}\n        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}\n        vercel-args: '--prod'\n        scope: ${{ secrets.VERCEL_ORG_ID }}\n        \n    - name: Notify deployment success\n      if: success()\n      run: echo \"ðŸš€ Production deployment successful!\"\n      \n  # Cleanup\n  cleanup:\n    name: Cleanup\n    runs-on: ubuntu-latest\n    needs: [deploy-staging, deploy-production]\n    if: always()\n    \n    steps:\n    - name: Clean up artifacts\n      run: echo \"Cleaning up temporary artifacts...\"