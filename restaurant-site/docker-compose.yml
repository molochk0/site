version: '3.8'

services:
  # Development database
  postgres:
    image: postgres:15-alpine
    container_name: restaurant-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: restaurant_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: restaurant-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Development Next.js application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: restaurant-app-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/restaurant_dev
      - REDIS_URL=redis://:redis_password@redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=dev-secret-key
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - restaurant-network
    command: npm run dev

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: restaurant-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - restaurant-network

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  restaurant-network:
    driver: bridge